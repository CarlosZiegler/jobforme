{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexports.__esModule = true;\nexports.observeLayoutShift = observeLayoutShift;\nexports.observeLargestContentfulPaint = observeLargestContentfulPaint;\nexports.observePaint = observePaint;\n\nfunction isTypeSupported(type) {\n  if (self.PerformanceObserver && PerformanceObserver.supportedEntryTypes) {\n    return PerformanceObserver.supportedEntryTypes.includes(type);\n  }\n\n  return false;\n}\n\nfunction observeLayoutShift(onPerfEntry) {\n  if (isTypeSupported('layout-shift')) {\n    var cumulativeScore = 0;\n    var observer = new PerformanceObserver(function (list) {\n      var _iterator = _createForOfIteratorHelper(list.getEntries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n\n          // Only count layout shifts without recent user input.\n          if (!entry.hadRecentInput) {\n            cumulativeScore += entry.value;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    observer.observe({\n      type: 'layout-shift',\n      buffered: true\n    });\n    document.addEventListener('visibilitychange', function clsObserver() {\n      if (document.visibilityState === 'hidden') {\n        // Force any pending records to be dispatched.\n        observer.takeRecords();\n        observer.disconnect();\n        document.removeEventListener('visibilitychange', clsObserver, true);\n        onPerfEntry({\n          name: 'cumulative-layout-shift',\n          value: cumulativeScore\n        });\n      }\n    }, true);\n  }\n}\n\nfunction observeLargestContentfulPaint(onPerfEntry) {\n  if (isTypeSupported('largest-contentful-paint')) {\n    // Create a variable to hold the latest LCP value (since it can change).\n    var lcp; // Create the PerformanceObserver instance.\n\n    var observer = new PerformanceObserver(function (entryList) {\n      var entries = entryList.getEntries();\n      var lastEntry = entries[entries.length - 1];\n      lcp = lastEntry.renderTime || lastEntry.loadTime;\n    });\n    observer.observe({\n      type: 'largest-contentful-paint',\n      buffered: true\n    });\n    document.addEventListener('visibilitychange', function lcpObserver() {\n      if (lcp && document.visibilityState === 'hidden') {\n        document.removeEventListener('visibilitychange', lcpObserver, true);\n        onPerfEntry({\n          name: 'largest-contentful-paint',\n          value: lcp\n        });\n      }\n    }, true);\n  }\n}\n\nfunction observePaint(onPerfEntry) {\n  var observer = new PerformanceObserver(function (list) {\n    list.getEntries().forEach(onPerfEntry);\n  });\n  observer.observe({\n    type: 'paint',\n    buffered: true\n  });\n}","map":{"version":3,"sources":["/Users/ziegler-dev/Desktop/PROJETOS/jobforme/node_modules/next/dist/client/performance-relayer.js"],"names":["exports","__esModule","observeLayoutShift","observeLargestContentfulPaint","observePaint","isTypeSupported","type","self","PerformanceObserver","supportedEntryTypes","includes","onPerfEntry","cumulativeScore","observer","list","getEntries","entry","hadRecentInput","value","observe","buffered","document","addEventListener","clsObserver","visibilityState","takeRecords","disconnect","removeEventListener","name","lcp","entryList","entries","lastEntry","length","renderTime","loadTime","lcpObserver","forEach"],"mappings":"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","sourcesContent":["\"use strict\";exports.__esModule=true;exports.observeLayoutShift=observeLayoutShift;exports.observeLargestContentfulPaint=observeLargestContentfulPaint;exports.observePaint=observePaint;function isTypeSupported(type){if(self.PerformanceObserver&&PerformanceObserver.supportedEntryTypes){return PerformanceObserver.supportedEntryTypes.includes(type);}return false;}function observeLayoutShift(onPerfEntry){if(isTypeSupported('layout-shift')){var cumulativeScore=0;var observer=new PerformanceObserver(list=>{for(var entry of list.getEntries()){// Only count layout shifts without recent user input.\nif(!entry.hadRecentInput){cumulativeScore+=entry.value;}}});observer.observe({type:'layout-shift',buffered:true});document.addEventListener('visibilitychange',function clsObserver(){if(document.visibilityState==='hidden'){// Force any pending records to be dispatched.\nobserver.takeRecords();observer.disconnect();document.removeEventListener('visibilitychange',clsObserver,true);onPerfEntry({name:'cumulative-layout-shift',value:cumulativeScore});}},true);}}function observeLargestContentfulPaint(onPerfEntry){if(isTypeSupported('largest-contentful-paint')){// Create a variable to hold the latest LCP value (since it can change).\nvar lcp;// Create the PerformanceObserver instance.\nvar observer=new PerformanceObserver(entryList=>{var entries=entryList.getEntries();var lastEntry=entries[entries.length-1];lcp=lastEntry.renderTime||lastEntry.loadTime;});observer.observe({type:'largest-contentful-paint',buffered:true});document.addEventListener('visibilitychange',function lcpObserver(){if(lcp&&document.visibilityState==='hidden'){document.removeEventListener('visibilitychange',lcpObserver,true);onPerfEntry({name:'largest-contentful-paint',value:lcp});}},true);}}function observePaint(onPerfEntry){var observer=new PerformanceObserver(list=>{list.getEntries().forEach(onPerfEntry);});observer.observe({type:'paint',buffered:true});}"]},"metadata":{},"sourceType":"script"}